# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/kpi_categories', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # KpiCategory. As you add validations to KpiCategory, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      KpiCategory.create! valid_attributes
      get kpi_categories_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      kpi_category = KpiCategory.create! valid_attributes
      get kpi_category_url(kpi_category)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_kpi_category_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      kpi_category = KpiCategory.create! valid_attributes
      get edit_kpi_category_url(kpi_category)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new KpiCategory' do
        expect do
          post kpi_categories_url, params: { kpi_category: valid_attributes }
        end.to change(KpiCategory, :count).by(1)
      end

      it 'redirects to the created kpi_category' do
        post kpi_categories_url, params: { kpi_category: valid_attributes }
        expect(response).to redirect_to(kpi_category_url(KpiCategory.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new KpiCategory' do
        expect do
          post kpi_categories_url, params: { kpi_category: invalid_attributes }
        end.to change(KpiCategory, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post kpi_categories_url, params: { kpi_category: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested kpi_category' do
        kpi_category = KpiCategory.create! valid_attributes
        patch kpi_category_url(kpi_category), params: { kpi_category: new_attributes }
        kpi_category.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the kpi_category' do
        kpi_category = KpiCategory.create! valid_attributes
        patch kpi_category_url(kpi_category), params: { kpi_category: new_attributes }
        kpi_category.reload
        expect(response).to redirect_to(kpi_category_url(kpi_category))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        kpi_category = KpiCategory.create! valid_attributes
        patch kpi_category_url(kpi_category), params: { kpi_category: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested kpi_category' do
      kpi_category = KpiCategory.create! valid_attributes
      expect do
        delete kpi_category_url(kpi_category)
      end.to change(KpiCategory, :count).by(-1)
    end

    it 'redirects to the kpi_categories list' do
      kpi_category = KpiCategory.create! valid_attributes
      delete kpi_category_url(kpi_category)
      expect(response).to redirect_to(kpi_categories_url)
    end
  end
end
