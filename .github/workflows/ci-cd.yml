name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  RAILS_ENV: test
  DB_NAME: rails_app_test
  DB_USER: postgres
  DB_PASSWORD: postgres
  DATABASE_URL: postgres://postgres:postgres@postgres:5432/rails_app_test

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: rails_app_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.1.2
        bundler-cache: true

    - name: Install dependencies
      run: |
        sudo apt-get -yqq install libpq-dev
        bundle install --jobs 4 --retry 3

    - name: Setup test database
      run: |
        bundle exec rails db:create
        bundle exec rails db:schema:load

    - name: Run tests
      run: |
        bundle exec rspec
        bundle exec rubocop
        bundle exec brakeman --no-pager

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/cfs-portal:latest
        build-args: |
          RAILS_ENV=production

    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/cfs-portal:latest
          docker-compose down
          docker-compose up -d
          docker system prune -f