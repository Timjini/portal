<turbo-frame id="checkbox-frame-<%=level.id%>">
  <% level.check_lists.each do |checklist| %>
    
    <div class="flex items-center mb-4">
      <input <%= checklist.checked_user_item(@athlete.user_id) %> data-user-id="<%= @athlete.user_id %>" data-checkbox-target="checklist-<%= checklist.id %>" data-checklist-id="<%= checklist.id %>" type="checkbox" value="" class="w-4 h-4 " >
      <label for="checklist-<%= checklist.id %>" class="ml-2 text-sm font-medium "><%= checklist.title %></label>
    </div>
  <% end %>
</turbo-frame>



<!-- This script should be move later -->
<script>
  document.addEventListener('turbo:load', () => {
    // Iterate over each level
    <% @levels.each do |level| %>
      const checkboxFrame<%= level.id %> = document.getElementById('checkbox-frame-<%= level.id %>');
      
      if (checkboxFrame<%= level.id %>) {
        // Use querySelectorAll to get all checkboxes within the checkbox-frame
        const checkboxes<%= level.id %> = checkboxFrame<%= level.id %>.querySelectorAll('[data-checkbox-target]');
    
        checkboxes<%= level.id %>.forEach(checkbox => {
          checkbox.addEventListener('click', () => {
            const checklistId = checkbox.getAttribute('data-checklist-id');
            const userId = checkbox.getAttribute('data-user-id');
            
            const postData = {
              checklist_item: {
                checklist_id: checklistId,
                user_id: userId,
                completed: checkbox.checked,
              },
            };
        
            console.log(postData);
        
            const url = '/checklist_items'; // Adjust the URL based on your routes
            // const method = checkbox.checked ? 'POST' : 'DELETE';
    
            // Make a POST/DELETE request for creating/deleting a checklist item
            fetch(url, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(postData),
            })
            .then(response => {
              if (!response.ok) {
                throw new Error('Network response was not ok');
              }
              return response.json();
            })
            .then(data => {
              console.log(`successful:`, data);
              const successMessage = checkbox.checked ? 'Checklist item added!' : 'Checklist item removed!';
              Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: successMessage,
              });
            })
            .catch(error => {
              console.error(`Error during performing request:`, error);
              const errorMessage = checkbox.checked ? 'Something went wrong adding checklist item!' : 'Something went wrong removing checklist item!';
              Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: errorMessage,
              });
            });
          });
        });
      }
    <% end %>
  });
</script>