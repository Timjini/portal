exit
params
exit
params[:attendance][:user_ids]
params[:attendance]["user_ids"]
params[:attendance]
params[:attendance][0]
a
@cear
continue
exit
TimeSlot.create(
            date: event_date,
            start_time: event_date,
            end_time: event_date + (time_slot.end_time - time_slot.start_time),
            coach_calendar_id: time_slot.coach_calendar_id,
            recurrence_rule: time_slot.recurrence_rule,
            recurrence_end: time_slot.recurrence_end,
            group_type: time_slot.group_type,
            slot_type: time_slot.slot_type,
          )
TimeSlot.create(
            start_time: event_date,
            end_time: event_date + (time_slot.end_time - time_slot.start_time),
            coach_calendar_id: time_slot.coach_calendar_id,
            recurrence_rule: time_slot.recurrence_rule,
            recurrence_end: time_slot.recurrence_end,
            group_type: time_slot.group_type,
            slot_type: time_slot.slot_type,
          )
event_date
exit
recurrence_rule
recurrence = Recurrence.new(recurrence_rule_hash)
exit
recurrence = Recurrence.new(recurrence_rule_hash)
exit
recurrence_rule
recurrence_rule = {
        every: recurrence_rule.to_sym,
        on: formatted_day,
        until: recurrence_end
      }.compact
formatted_day
      recurrence = Recurrence.new(recurrence_rule)
exit
      recurrence_rule = { every: recurrence_rule.to_sym, on: formatted_day ,  until: recurrence_end }.compact
formatted_day = day.strftime('%A').downcase.to_sym
day = Time.now
recurrence = Recurrence.new(recurrence_rule)
exit
formatted_day.to_sym
      recurrence = Recurrence.new(recurrence_rule)
recurrence_rule
exit
recurrence = Recurrence.new(recurrence_rule)
exit
recurrence
exit
params['time_slot']['start_time']
params['time_slot']['start_time'
params['time_slot']
params['time_slot'
params
params[:start_time]
params['start_time']
params.start_time
start_time
params[:start_time]
paams
paras
paraarams
exit
@levels
exit
params[:level]
@levels
p
payoad
ploadayload
yloa
p
payod
exit
child
parent
